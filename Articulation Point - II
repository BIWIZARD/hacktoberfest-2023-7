Given an undirected graph (not necessarily connected) with V vertices and adjacency list adj. You are required to find all the vertices removing which (and edges through it) disconnects the graph into 2 or more components, or in other words, removing which increases the number of connected components.
Note: Indexing is zero-based i.e nodes numbering from (0 to V-1). There might be loops present in the graph.

def longestPalindromicSubstring(s):
    from collections import Counter
    
    # Count the frequency of each character in the string
    char_count = Counter(s)
    
    # Initialize variables to track the length of the longest palindrome and whether an odd-length character is allowed
    max_length = 0
    odd_length_allowed = False
    
    for char in char_count:
        count = char_count[char]
        
        # If the count is even, add it to the max length directly
        if count % 2 == 0:
            max_length += count
        # If the count is odd, add (count - 1) to the max length and set odd_length_allowed to True
        else:
            max_length += count - 1
            odd_length_allowed = True
    
    # If odd-length characters are allowed, add 1 to the max length
    if odd_length_allowed:
        max_length += 1
    
    return max_length

# Example
s = "aabe"
result = longestPalindromicSubstring(s)
print(result)
